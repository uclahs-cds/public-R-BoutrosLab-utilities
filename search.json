[{"path":"/CHANGELOG.html","id":null,"dir":"","previous_headings":"","what":"Changelog","title":"Changelog","text":"notable changes tool_name Docker file. format based Keep Changelog. project adheres Semantic Versioning.","code":""},{"path":[]},{"path":"/CHANGELOG.html","id":"changed","dir":"","previous_headings":"[Unreleased]","what":"Changed","title":"Changelog","text":"Changed something part last release.","code":""},{"path":[]},{"path":"/CHANGELOG.html","id":"added","dir":"","previous_headings":"[1.0.0] - YYYY-MM-DD","what":"Added","title":"Changelog","text":"new features. Added item 1.","code":""},{"path":"/CHANGELOG.html","id":"changed-1","dir":"","previous_headings":"[1.0.0] - YYYY-MM-DD","what":"Changed","title":"Changelog","text":"changes existing functionality. Changed item 1.","code":""},{"path":"/CHANGELOG.html","id":"deprecated","dir":"","previous_headings":"[1.0.0] - YYYY-MM-DD","what":"Deprecated","title":"Changelog","text":"soon--removed features.","code":""},{"path":"/CHANGELOG.html","id":"removed","dir":"","previous_headings":"[1.0.0] - YYYY-MM-DD","what":"Removed","title":"Changelog","text":"now removed features. Removed item 1.","code":""},{"path":"/CHANGELOG.html","id":"fixed","dir":"","previous_headings":"[1.0.0] - YYYY-MM-DD","what":"Fixed","title":"Changelog","text":"bug fixes. Fixed item 1.","code":""},{"path":"/CHANGELOG.html","id":"security","dir":"","previous_headings":"[1.0.0] - YYYY-MM-DD","what":"Security","title":"Changelog","text":"case vulnerabilities.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Boutros. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Boutros DPC (2022). BoutrosLab.utilities: Set Utility Functions. R package version 1.9.10.","code":"@Manual{,   title = {BoutrosLab.utilities: A Set of Utility Functions},   author = {Dr. Paul C. Boutros},   year = {2022},   note = {R package version 1.9.10}, }"},{"path":"/index.html","id":"boutroslab-r-utilities","dir":"","previous_headings":"","what":"A Set of Utility Functions","title":"A Set of Utility Functions","text":"Assorted Boutros Lab R utilities.","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"A Set of Utility Functions","text":"Boutros Lab R utilities","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"A Set of Utility Functions","text":"Author: Dr. Paul C. Boutros Copyright (C) 2022 University California Los Angeles (“Boutros Lab”) rights reserved. program free software; can redistribute /modify terms GNU General Public License published Free Software Foundation; either version 2 License, (option) later version. program distributed hope useful, WITHOUT WARRANTY; without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE. See GNU General Public License details.","code":""},{"path":"/reference/BoutrosLab.utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Boutros Lab Utility Functions — BoutrosLab.utilities-package","title":"Boutros Lab Utility Functions — BoutrosLab.utilities-package","text":"set useful utility functions R coding","code":""},{"path":"/reference/BoutrosLab.utilities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boutros Lab Utility Functions — BoutrosLab.utilities-package","text":"GarbageCollect(x = 9); generate.filename(project.stem, file.core, extension, file.date = Sys.Date()); read.config.file(config.file = \"config.txt\", convert.path = FALSE,      old.path = (.Platform$OS.type == \"unix\") \":\" else \"/mnt/isilon/private\",      new.path = (.Platform$OS.type == \"unix\") \"/mnt/isilon/private\" else \":\"); read.tabdelimited(file); save.session.profile(filename); trim.leading.trailing.whitespace(x); trim.leading.whitespace(x); trim.trailing.whitespace(x);","code":""},{"path":"/reference/BoutrosLab.utilities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boutros Lab Utility Functions — BoutrosLab.utilities-package","text":"Author: Paul C. Boutros <Paul.Boutros@utoronto.ca> Maintainer: Paul C. Boutros <Paul.Boutros@utoronto.ca>","code":""},{"path":"/reference/GarbageCollect.html","id":null,"dir":"Reference","previous_headings":"","what":"Force Garbage Collection — GarbageCollect","title":"Force Garbage Collection — GarbageCollect","text":"function forces garbage collection help ensure much memory necessary returned.  just wrapper gc() allows multiple-calls leads readable code.","code":""},{"path":"/reference/GarbageCollect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force Garbage Collection — GarbageCollect","text":"","code":"GarbageCollect(x);"},{"path":"/reference/GarbageCollect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force Garbage Collection — GarbageCollect","text":"x Number iterations gc() run, defaults nine","code":""},{"path":"/reference/GarbageCollect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force Garbage Collection — GarbageCollect","text":"return value","code":""},{"path":"/reference/GarbageCollect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Force Garbage Collection — GarbageCollect","text":"Paul C. Boutros","code":""},{"path":"/reference/GarbageCollect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force Garbage Collection — GarbageCollect","text":"","code":"GarbageCollect(3);"},{"path":"/reference/convert.magic.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts columns in a dataframe to specified type. — convert.magic","title":"Converts columns in a dataframe to specified type. — convert.magic","text":"Takes dataframe, converts specified columns specified type. See examples regular use.","code":""},{"path":"/reference/convert.magic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts columns in a dataframe to specified type. — convert.magic","text":"","code":"convert.magic(obj, type)"},{"path":"/reference/convert.magic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts columns in a dataframe to specified type. — convert.magic","text":"obj dataframe type Type convert , 'factor', 'numeric' 'character'","code":""},{"path":"/reference/convert.magic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts columns in a dataframe to specified type. — convert.magic","text":"dataframe coerced specified type.","code":""},{"path":"/reference/convert.magic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Converts columns in a dataframe to specified type. — convert.magic","text":"Nicholas Harding","code":""},{"path":"/reference/convert.magic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts columns in a dataframe to specified type. — convert.magic","text":"","code":"df <- data.frame(x = 1:10,   y = rep(1:2, 5),   k = rnorm(10, 5,2),   z = rep(c(2010, 2012, 2011, 2010, 1999), 2),   j = c(rep(c(\"a\", \"b\", \"c\"), 3), \"d\")   );  str(df); #> 'data.frame':\t10 obs. of  5 variables: #>  $ x: int  1 2 3 4 5 6 7 8 9 10 #>  $ y: int  1 2 1 2 1 2 1 2 1 2 #>  $ k: num  5.71 5.51 6.19 7.34 3.64 ... #>  $ z: num  2010 2012 2011 2010 1999 ... #>  $ j: chr  \"a\" \"b\" \"c\" \"a\" ... str(convert.magic(df, \"character\")); #> 'data.frame':\t10 obs. of  5 variables: #>  $ x: chr  \"1\" \"2\" \"3\" \"4\" ... #>  $ y: chr  \"1\" \"2\" \"1\" \"2\" ... #>  $ k: chr  \"5.71087650481126\" \"5.51061907231196\" \"6.18886681391347\" \"7.3441374838222\" ... #>  $ z: chr  \"2010\" \"2012\" \"2011\" \"2010\" ... #>  $ j: chr  \"a\" \"b\" \"c\" \"a\" ... str(convert.magic(df, \"factor\")); #> 'data.frame':\t10 obs. of  5 variables: #>  $ x: Factor w/ 10 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 6 7 8 9 10 #>  $ y: Factor w/ 2 levels \"1\",\"2\": 1 2 1 2 1 2 1 2 1 2 #>  $ k: Factor w/ 10 levels \"1.83126135741432\",..: 7 5 9 10 3 4 2 6 8 1 #>  $ z: Factor w/ 4 levels \"1999\",\"2010\",..: 2 4 3 2 1 2 4 3 2 1 #>  $ j: Factor w/ 4 levels \"a\",\"b\",\"c\",\"d\": 1 2 3 1 2 3 1 2 3 4  # or use specific columns only! df[, c(\"x\", \"y\")] <- convert.magic(df[, c(\"x\", \"y\")], \"factor\");"},{"path":"/reference/evaluate.and.save.html","id":null,"dir":"Reference","previous_headings":"","what":"Save and read R object from disk — evaluate.and.save","title":"Save and read R object from disk — evaluate.and.save","text":"function generates R object exist, reads object disk exists.","code":""},{"path":"/reference/evaluate.and.save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save and read R object from disk — evaluate.and.save","text":"","code":"evaluate.and.save(object.path, object.constructor, should.print = TRUE, should.flush = FALSE);"},{"path":"/reference/evaluate.and.save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save and read R object from disk — evaluate.and.save","text":"object.path path R object object.constructor function returns R object .print logical indicating whether print disk activity .flush logical indicating whether flush object stored disk","code":""},{"path":"/reference/evaluate.and.save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save and read R object from disk — evaluate.and.save","text":"R Object","code":""},{"path":"/reference/evaluate.and.save.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save and read R object from disk — evaluate.and.save","text":"Nathaniel Schmitz","code":""},{"path":"/reference/evaluate.and.save.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save and read R object from disk — evaluate.and.save","text":"","code":"# save a large csv file to a dataframe for fast subsequent loading evaluate.and.save(   'large_table.rds',   function() {     data.frame(       row = 1:1000,       value = rnorm(4)       );     },   should.print = TRUE,   should.flush = FALSE   ); #> IO: Saving object large_table.rds #>       row      value #> 1       1  0.5437713 #> 2       2  0.3212794 #> 3       3 -1.2363009 #> 4       4  1.0201267 #> 5       5  0.5437713 #> 6       6  0.3212794 #> 7       7 -1.2363009 #> 8       8  1.0201267 #> 9       9  0.5437713 #> 10     10  0.3212794 #> 11     11 -1.2363009 #> 12     12  1.0201267 #> 13     13  0.5437713 #> 14     14  0.3212794 #> 15     15 -1.2363009 #> 16     16  1.0201267 #> 17     17  0.5437713 #> 18     18  0.3212794 #> 19     19 -1.2363009 #> 20     20  1.0201267 #> 21     21  0.5437713 #> 22     22  0.3212794 #> 23     23 -1.2363009 #> 24     24  1.0201267 #> 25     25  0.5437713 #> 26     26  0.3212794 #> 27     27 -1.2363009 #> 28     28  1.0201267 #> 29     29  0.5437713 #> 30     30  0.3212794 #> 31     31 -1.2363009 #> 32     32  1.0201267 #> 33     33  0.5437713 #> 34     34  0.3212794 #> 35     35 -1.2363009 #> 36     36  1.0201267 #> 37     37  0.5437713 #> 38     38  0.3212794 #> 39     39 -1.2363009 #> 40     40  1.0201267 #> 41     41  0.5437713 #> 42     42  0.3212794 #> 43     43 -1.2363009 #> 44     44  1.0201267 #> 45     45  0.5437713 #> 46     46  0.3212794 #> 47     47 -1.2363009 #> 48     48  1.0201267 #> 49     49  0.5437713 #> 50     50  0.3212794 #> 51     51 -1.2363009 #> 52     52  1.0201267 #> 53     53  0.5437713 #> 54     54  0.3212794 #> 55     55 -1.2363009 #> 56     56  1.0201267 #> 57     57  0.5437713 #> 58     58  0.3212794 #> 59     59 -1.2363009 #> 60     60  1.0201267 #> 61     61  0.5437713 #> 62     62  0.3212794 #> 63     63 -1.2363009 #> 64     64  1.0201267 #> 65     65  0.5437713 #> 66     66  0.3212794 #> 67     67 -1.2363009 #> 68     68  1.0201267 #> 69     69  0.5437713 #> 70     70  0.3212794 #> 71     71 -1.2363009 #> 72     72  1.0201267 #> 73     73  0.5437713 #> 74     74  0.3212794 #> 75     75 -1.2363009 #> 76     76  1.0201267 #> 77     77  0.5437713 #> 78     78  0.3212794 #> 79     79 -1.2363009 #> 80     80  1.0201267 #> 81     81  0.5437713 #> 82     82  0.3212794 #> 83     83 -1.2363009 #> 84     84  1.0201267 #> 85     85  0.5437713 #> 86     86  0.3212794 #> 87     87 -1.2363009 #> 88     88  1.0201267 #> 89     89  0.5437713 #> 90     90  0.3212794 #> 91     91 -1.2363009 #> 92     92  1.0201267 #> 93     93  0.5437713 #> 94     94  0.3212794 #> 95     95 -1.2363009 #> 96     96  1.0201267 #> 97     97  0.5437713 #> 98     98  0.3212794 #> 99     99 -1.2363009 #> 100   100  1.0201267 #> 101   101  0.5437713 #> 102   102  0.3212794 #> 103   103 -1.2363009 #> 104   104  1.0201267 #> 105   105  0.5437713 #> 106   106  0.3212794 #> 107   107 -1.2363009 #> 108   108  1.0201267 #> 109   109  0.5437713 #> 110   110  0.3212794 #> 111   111 -1.2363009 #> 112   112  1.0201267 #> 113   113  0.5437713 #> 114   114  0.3212794 #> 115   115 -1.2363009 #> 116   116  1.0201267 #> 117   117  0.5437713 #> 118   118  0.3212794 #> 119   119 -1.2363009 #> 120   120  1.0201267 #> 121   121  0.5437713 #> 122   122  0.3212794 #> 123   123 -1.2363009 #> 124   124  1.0201267 #> 125   125  0.5437713 #> 126   126  0.3212794 #> 127   127 -1.2363009 #> 128   128  1.0201267 #> 129   129  0.5437713 #> 130   130  0.3212794 #> 131   131 -1.2363009 #> 132   132  1.0201267 #> 133   133  0.5437713 #> 134   134  0.3212794 #> 135   135 -1.2363009 #> 136   136  1.0201267 #> 137   137  0.5437713 #> 138   138  0.3212794 #> 139   139 -1.2363009 #> 140   140  1.0201267 #> 141   141  0.5437713 #> 142   142  0.3212794 #> 143   143 -1.2363009 #> 144   144  1.0201267 #> 145   145  0.5437713 #> 146   146  0.3212794 #> 147   147 -1.2363009 #> 148   148  1.0201267 #> 149   149  0.5437713 #> 150   150  0.3212794 #> 151   151 -1.2363009 #> 152   152  1.0201267 #> 153   153  0.5437713 #> 154   154  0.3212794 #> 155   155 -1.2363009 #> 156   156  1.0201267 #> 157   157  0.5437713 #> 158   158  0.3212794 #> 159   159 -1.2363009 #> 160   160  1.0201267 #> 161   161  0.5437713 #> 162   162  0.3212794 #> 163   163 -1.2363009 #> 164   164  1.0201267 #> 165   165  0.5437713 #> 166   166  0.3212794 #> 167   167 -1.2363009 #> 168   168  1.0201267 #> 169   169  0.5437713 #> 170   170  0.3212794 #> 171   171 -1.2363009 #> 172   172  1.0201267 #> 173   173  0.5437713 #> 174   174  0.3212794 #> 175   175 -1.2363009 #> 176   176  1.0201267 #> 177   177  0.5437713 #> 178   178  0.3212794 #> 179   179 -1.2363009 #> 180   180  1.0201267 #> 181   181  0.5437713 #> 182   182  0.3212794 #> 183   183 -1.2363009 #> 184   184  1.0201267 #> 185   185  0.5437713 #> 186   186  0.3212794 #> 187   187 -1.2363009 #> 188   188  1.0201267 #> 189   189  0.5437713 #> 190   190  0.3212794 #> 191   191 -1.2363009 #> 192   192  1.0201267 #> 193   193  0.5437713 #> 194   194  0.3212794 #> 195   195 -1.2363009 #> 196   196  1.0201267 #> 197   197  0.5437713 #> 198   198  0.3212794 #> 199   199 -1.2363009 #> 200   200  1.0201267 #> 201   201  0.5437713 #> 202   202  0.3212794 #> 203   203 -1.2363009 #> 204   204  1.0201267 #> 205   205  0.5437713 #> 206   206  0.3212794 #> 207   207 -1.2363009 #> 208   208  1.0201267 #> 209   209  0.5437713 #> 210   210  0.3212794 #> 211   211 -1.2363009 #> 212   212  1.0201267 #> 213   213  0.5437713 #> 214   214  0.3212794 #> 215   215 -1.2363009 #> 216   216  1.0201267 #> 217   217  0.5437713 #> 218   218  0.3212794 #> 219   219 -1.2363009 #> 220   220  1.0201267 #> 221   221  0.5437713 #> 222   222  0.3212794 #> 223   223 -1.2363009 #> 224   224  1.0201267 #> 225   225  0.5437713 #> 226   226  0.3212794 #> 227   227 -1.2363009 #> 228   228  1.0201267 #> 229   229  0.5437713 #> 230   230  0.3212794 #> 231   231 -1.2363009 #> 232   232  1.0201267 #> 233   233  0.5437713 #> 234   234  0.3212794 #> 235   235 -1.2363009 #> 236   236  1.0201267 #> 237   237  0.5437713 #> 238   238  0.3212794 #> 239   239 -1.2363009 #> 240   240  1.0201267 #> 241   241  0.5437713 #> 242   242  0.3212794 #> 243   243 -1.2363009 #> 244   244  1.0201267 #> 245   245  0.5437713 #> 246   246  0.3212794 #> 247   247 -1.2363009 #> 248   248  1.0201267 #> 249   249  0.5437713 #> 250   250  0.3212794 #> 251   251 -1.2363009 #> 252   252  1.0201267 #> 253   253  0.5437713 #> 254   254  0.3212794 #> 255   255 -1.2363009 #> 256   256  1.0201267 #> 257   257  0.5437713 #> 258   258  0.3212794 #> 259   259 -1.2363009 #> 260   260  1.0201267 #> 261   261  0.5437713 #> 262   262  0.3212794 #> 263   263 -1.2363009 #> 264   264  1.0201267 #> 265   265  0.5437713 #> 266   266  0.3212794 #> 267   267 -1.2363009 #> 268   268  1.0201267 #> 269   269  0.5437713 #> 270   270  0.3212794 #> 271   271 -1.2363009 #> 272   272  1.0201267 #> 273   273  0.5437713 #> 274   274  0.3212794 #> 275   275 -1.2363009 #> 276   276  1.0201267 #> 277   277  0.5437713 #> 278   278  0.3212794 #> 279   279 -1.2363009 #> 280   280  1.0201267 #> 281   281  0.5437713 #> 282   282  0.3212794 #> 283   283 -1.2363009 #> 284   284  1.0201267 #> 285   285  0.5437713 #> 286   286  0.3212794 #> 287   287 -1.2363009 #> 288   288  1.0201267 #> 289   289  0.5437713 #> 290   290  0.3212794 #> 291   291 -1.2363009 #> 292   292  1.0201267 #> 293   293  0.5437713 #> 294   294  0.3212794 #> 295   295 -1.2363009 #> 296   296  1.0201267 #> 297   297  0.5437713 #> 298   298  0.3212794 #> 299   299 -1.2363009 #> 300   300  1.0201267 #> 301   301  0.5437713 #> 302   302  0.3212794 #> 303   303 -1.2363009 #> 304   304  1.0201267 #> 305   305  0.5437713 #> 306   306  0.3212794 #> 307   307 -1.2363009 #> 308   308  1.0201267 #> 309   309  0.5437713 #> 310   310  0.3212794 #> 311   311 -1.2363009 #> 312   312  1.0201267 #> 313   313  0.5437713 #> 314   314  0.3212794 #> 315   315 -1.2363009 #> 316   316  1.0201267 #> 317   317  0.5437713 #> 318   318  0.3212794 #> 319   319 -1.2363009 #> 320   320  1.0201267 #> 321   321  0.5437713 #> 322   322  0.3212794 #> 323   323 -1.2363009 #> 324   324  1.0201267 #> 325   325  0.5437713 #> 326   326  0.3212794 #> 327   327 -1.2363009 #> 328   328  1.0201267 #> 329   329  0.5437713 #> 330   330  0.3212794 #> 331   331 -1.2363009 #> 332   332  1.0201267 #> 333   333  0.5437713 #> 334   334  0.3212794 #> 335   335 -1.2363009 #> 336   336  1.0201267 #> 337   337  0.5437713 #> 338   338  0.3212794 #> 339   339 -1.2363009 #> 340   340  1.0201267 #> 341   341  0.5437713 #> 342   342  0.3212794 #> 343   343 -1.2363009 #> 344   344  1.0201267 #> 345   345  0.5437713 #> 346   346  0.3212794 #> 347   347 -1.2363009 #> 348   348  1.0201267 #> 349   349  0.5437713 #> 350   350  0.3212794 #> 351   351 -1.2363009 #> 352   352  1.0201267 #> 353   353  0.5437713 #> 354   354  0.3212794 #> 355   355 -1.2363009 #> 356   356  1.0201267 #> 357   357  0.5437713 #> 358   358  0.3212794 #> 359   359 -1.2363009 #> 360   360  1.0201267 #> 361   361  0.5437713 #> 362   362  0.3212794 #> 363   363 -1.2363009 #> 364   364  1.0201267 #> 365   365  0.5437713 #> 366   366  0.3212794 #> 367   367 -1.2363009 #> 368   368  1.0201267 #> 369   369  0.5437713 #> 370   370  0.3212794 #> 371   371 -1.2363009 #> 372   372  1.0201267 #> 373   373  0.5437713 #> 374   374  0.3212794 #> 375   375 -1.2363009 #> 376   376  1.0201267 #> 377   377  0.5437713 #> 378   378  0.3212794 #> 379   379 -1.2363009 #> 380   380  1.0201267 #> 381   381  0.5437713 #> 382   382  0.3212794 #> 383   383 -1.2363009 #> 384   384  1.0201267 #> 385   385  0.5437713 #> 386   386  0.3212794 #> 387   387 -1.2363009 #> 388   388  1.0201267 #> 389   389  0.5437713 #> 390   390  0.3212794 #> 391   391 -1.2363009 #> 392   392  1.0201267 #> 393   393  0.5437713 #> 394   394  0.3212794 #> 395   395 -1.2363009 #> 396   396  1.0201267 #> 397   397  0.5437713 #> 398   398  0.3212794 #> 399   399 -1.2363009 #> 400   400  1.0201267 #> 401   401  0.5437713 #> 402   402  0.3212794 #> 403   403 -1.2363009 #> 404   404  1.0201267 #> 405   405  0.5437713 #> 406   406  0.3212794 #> 407   407 -1.2363009 #> 408   408  1.0201267 #> 409   409  0.5437713 #> 410   410  0.3212794 #> 411   411 -1.2363009 #> 412   412  1.0201267 #> 413   413  0.5437713 #> 414   414  0.3212794 #> 415   415 -1.2363009 #> 416   416  1.0201267 #> 417   417  0.5437713 #> 418   418  0.3212794 #> 419   419 -1.2363009 #> 420   420  1.0201267 #> 421   421  0.5437713 #> 422   422  0.3212794 #> 423   423 -1.2363009 #> 424   424  1.0201267 #> 425   425  0.5437713 #> 426   426  0.3212794 #> 427   427 -1.2363009 #> 428   428  1.0201267 #> 429   429  0.5437713 #> 430   430  0.3212794 #> 431   431 -1.2363009 #> 432   432  1.0201267 #> 433   433  0.5437713 #> 434   434  0.3212794 #> 435   435 -1.2363009 #> 436   436  1.0201267 #> 437   437  0.5437713 #> 438   438  0.3212794 #> 439   439 -1.2363009 #> 440   440  1.0201267 #> 441   441  0.5437713 #> 442   442  0.3212794 #> 443   443 -1.2363009 #> 444   444  1.0201267 #> 445   445  0.5437713 #> 446   446  0.3212794 #> 447   447 -1.2363009 #> 448   448  1.0201267 #> 449   449  0.5437713 #> 450   450  0.3212794 #> 451   451 -1.2363009 #> 452   452  1.0201267 #> 453   453  0.5437713 #> 454   454  0.3212794 #> 455   455 -1.2363009 #> 456   456  1.0201267 #> 457   457  0.5437713 #> 458   458  0.3212794 #> 459   459 -1.2363009 #> 460   460  1.0201267 #> 461   461  0.5437713 #> 462   462  0.3212794 #> 463   463 -1.2363009 #> 464   464  1.0201267 #> 465   465  0.5437713 #> 466   466  0.3212794 #> 467   467 -1.2363009 #> 468   468  1.0201267 #> 469   469  0.5437713 #> 470   470  0.3212794 #> 471   471 -1.2363009 #> 472   472  1.0201267 #> 473   473  0.5437713 #> 474   474  0.3212794 #> 475   475 -1.2363009 #> 476   476  1.0201267 #> 477   477  0.5437713 #> 478   478  0.3212794 #> 479   479 -1.2363009 #> 480   480  1.0201267 #> 481   481  0.5437713 #> 482   482  0.3212794 #> 483   483 -1.2363009 #> 484   484  1.0201267 #> 485   485  0.5437713 #> 486   486  0.3212794 #> 487   487 -1.2363009 #> 488   488  1.0201267 #> 489   489  0.5437713 #> 490   490  0.3212794 #> 491   491 -1.2363009 #> 492   492  1.0201267 #> 493   493  0.5437713 #> 494   494  0.3212794 #> 495   495 -1.2363009 #> 496   496  1.0201267 #> 497   497  0.5437713 #> 498   498  0.3212794 #> 499   499 -1.2363009 #> 500   500  1.0201267 #> 501   501  0.5437713 #> 502   502  0.3212794 #> 503   503 -1.2363009 #> 504   504  1.0201267 #> 505   505  0.5437713 #> 506   506  0.3212794 #> 507   507 -1.2363009 #> 508   508  1.0201267 #> 509   509  0.5437713 #> 510   510  0.3212794 #> 511   511 -1.2363009 #> 512   512  1.0201267 #> 513   513  0.5437713 #> 514   514  0.3212794 #> 515   515 -1.2363009 #> 516   516  1.0201267 #> 517   517  0.5437713 #> 518   518  0.3212794 #> 519   519 -1.2363009 #> 520   520  1.0201267 #> 521   521  0.5437713 #> 522   522  0.3212794 #> 523   523 -1.2363009 #> 524   524  1.0201267 #> 525   525  0.5437713 #> 526   526  0.3212794 #> 527   527 -1.2363009 #> 528   528  1.0201267 #> 529   529  0.5437713 #> 530   530  0.3212794 #> 531   531 -1.2363009 #> 532   532  1.0201267 #> 533   533  0.5437713 #> 534   534  0.3212794 #> 535   535 -1.2363009 #> 536   536  1.0201267 #> 537   537  0.5437713 #> 538   538  0.3212794 #> 539   539 -1.2363009 #> 540   540  1.0201267 #> 541   541  0.5437713 #> 542   542  0.3212794 #> 543   543 -1.2363009 #> 544   544  1.0201267 #> 545   545  0.5437713 #> 546   546  0.3212794 #> 547   547 -1.2363009 #> 548   548  1.0201267 #> 549   549  0.5437713 #> 550   550  0.3212794 #> 551   551 -1.2363009 #> 552   552  1.0201267 #> 553   553  0.5437713 #> 554   554  0.3212794 #> 555   555 -1.2363009 #> 556   556  1.0201267 #> 557   557  0.5437713 #> 558   558  0.3212794 #> 559   559 -1.2363009 #> 560   560  1.0201267 #> 561   561  0.5437713 #> 562   562  0.3212794 #> 563   563 -1.2363009 #> 564   564  1.0201267 #> 565   565  0.5437713 #> 566   566  0.3212794 #> 567   567 -1.2363009 #> 568   568  1.0201267 #> 569   569  0.5437713 #> 570   570  0.3212794 #> 571   571 -1.2363009 #> 572   572  1.0201267 #> 573   573  0.5437713 #> 574   574  0.3212794 #> 575   575 -1.2363009 #> 576   576  1.0201267 #> 577   577  0.5437713 #> 578   578  0.3212794 #> 579   579 -1.2363009 #> 580   580  1.0201267 #> 581   581  0.5437713 #> 582   582  0.3212794 #> 583   583 -1.2363009 #> 584   584  1.0201267 #> 585   585  0.5437713 #> 586   586  0.3212794 #> 587   587 -1.2363009 #> 588   588  1.0201267 #> 589   589  0.5437713 #> 590   590  0.3212794 #> 591   591 -1.2363009 #> 592   592  1.0201267 #> 593   593  0.5437713 #> 594   594  0.3212794 #> 595   595 -1.2363009 #> 596   596  1.0201267 #> 597   597  0.5437713 #> 598   598  0.3212794 #> 599   599 -1.2363009 #> 600   600  1.0201267 #> 601   601  0.5437713 #> 602   602  0.3212794 #> 603   603 -1.2363009 #> 604   604  1.0201267 #> 605   605  0.5437713 #> 606   606  0.3212794 #> 607   607 -1.2363009 #> 608   608  1.0201267 #> 609   609  0.5437713 #> 610   610  0.3212794 #> 611   611 -1.2363009 #> 612   612  1.0201267 #> 613   613  0.5437713 #> 614   614  0.3212794 #> 615   615 -1.2363009 #> 616   616  1.0201267 #> 617   617  0.5437713 #> 618   618  0.3212794 #> 619   619 -1.2363009 #> 620   620  1.0201267 #> 621   621  0.5437713 #> 622   622  0.3212794 #> 623   623 -1.2363009 #> 624   624  1.0201267 #> 625   625  0.5437713 #> 626   626  0.3212794 #> 627   627 -1.2363009 #> 628   628  1.0201267 #> 629   629  0.5437713 #> 630   630  0.3212794 #> 631   631 -1.2363009 #> 632   632  1.0201267 #> 633   633  0.5437713 #> 634   634  0.3212794 #> 635   635 -1.2363009 #> 636   636  1.0201267 #> 637   637  0.5437713 #> 638   638  0.3212794 #> 639   639 -1.2363009 #> 640   640  1.0201267 #> 641   641  0.5437713 #> 642   642  0.3212794 #> 643   643 -1.2363009 #> 644   644  1.0201267 #> 645   645  0.5437713 #> 646   646  0.3212794 #> 647   647 -1.2363009 #> 648   648  1.0201267 #> 649   649  0.5437713 #> 650   650  0.3212794 #> 651   651 -1.2363009 #> 652   652  1.0201267 #> 653   653  0.5437713 #> 654   654  0.3212794 #> 655   655 -1.2363009 #> 656   656  1.0201267 #> 657   657  0.5437713 #> 658   658  0.3212794 #> 659   659 -1.2363009 #> 660   660  1.0201267 #> 661   661  0.5437713 #> 662   662  0.3212794 #> 663   663 -1.2363009 #> 664   664  1.0201267 #> 665   665  0.5437713 #> 666   666  0.3212794 #> 667   667 -1.2363009 #> 668   668  1.0201267 #> 669   669  0.5437713 #> 670   670  0.3212794 #> 671   671 -1.2363009 #> 672   672  1.0201267 #> 673   673  0.5437713 #> 674   674  0.3212794 #> 675   675 -1.2363009 #> 676   676  1.0201267 #> 677   677  0.5437713 #> 678   678  0.3212794 #> 679   679 -1.2363009 #> 680   680  1.0201267 #> 681   681  0.5437713 #> 682   682  0.3212794 #> 683   683 -1.2363009 #> 684   684  1.0201267 #> 685   685  0.5437713 #> 686   686  0.3212794 #> 687   687 -1.2363009 #> 688   688  1.0201267 #> 689   689  0.5437713 #> 690   690  0.3212794 #> 691   691 -1.2363009 #> 692   692  1.0201267 #> 693   693  0.5437713 #> 694   694  0.3212794 #> 695   695 -1.2363009 #> 696   696  1.0201267 #> 697   697  0.5437713 #> 698   698  0.3212794 #> 699   699 -1.2363009 #> 700   700  1.0201267 #> 701   701  0.5437713 #> 702   702  0.3212794 #> 703   703 -1.2363009 #> 704   704  1.0201267 #> 705   705  0.5437713 #> 706   706  0.3212794 #> 707   707 -1.2363009 #> 708   708  1.0201267 #> 709   709  0.5437713 #> 710   710  0.3212794 #> 711   711 -1.2363009 #> 712   712  1.0201267 #> 713   713  0.5437713 #> 714   714  0.3212794 #> 715   715 -1.2363009 #> 716   716  1.0201267 #> 717   717  0.5437713 #> 718   718  0.3212794 #> 719   719 -1.2363009 #> 720   720  1.0201267 #> 721   721  0.5437713 #> 722   722  0.3212794 #> 723   723 -1.2363009 #> 724   724  1.0201267 #> 725   725  0.5437713 #> 726   726  0.3212794 #> 727   727 -1.2363009 #> 728   728  1.0201267 #> 729   729  0.5437713 #> 730   730  0.3212794 #> 731   731 -1.2363009 #> 732   732  1.0201267 #> 733   733  0.5437713 #> 734   734  0.3212794 #> 735   735 -1.2363009 #> 736   736  1.0201267 #> 737   737  0.5437713 #> 738   738  0.3212794 #> 739   739 -1.2363009 #> 740   740  1.0201267 #> 741   741  0.5437713 #> 742   742  0.3212794 #> 743   743 -1.2363009 #> 744   744  1.0201267 #> 745   745  0.5437713 #> 746   746  0.3212794 #> 747   747 -1.2363009 #> 748   748  1.0201267 #> 749   749  0.5437713 #> 750   750  0.3212794 #> 751   751 -1.2363009 #> 752   752  1.0201267 #> 753   753  0.5437713 #> 754   754  0.3212794 #> 755   755 -1.2363009 #> 756   756  1.0201267 #> 757   757  0.5437713 #> 758   758  0.3212794 #> 759   759 -1.2363009 #> 760   760  1.0201267 #> 761   761  0.5437713 #> 762   762  0.3212794 #> 763   763 -1.2363009 #> 764   764  1.0201267 #> 765   765  0.5437713 #> 766   766  0.3212794 #> 767   767 -1.2363009 #> 768   768  1.0201267 #> 769   769  0.5437713 #> 770   770  0.3212794 #> 771   771 -1.2363009 #> 772   772  1.0201267 #> 773   773  0.5437713 #> 774   774  0.3212794 #> 775   775 -1.2363009 #> 776   776  1.0201267 #> 777   777  0.5437713 #> 778   778  0.3212794 #> 779   779 -1.2363009 #> 780   780  1.0201267 #> 781   781  0.5437713 #> 782   782  0.3212794 #> 783   783 -1.2363009 #> 784   784  1.0201267 #> 785   785  0.5437713 #> 786   786  0.3212794 #> 787   787 -1.2363009 #> 788   788  1.0201267 #> 789   789  0.5437713 #> 790   790  0.3212794 #> 791   791 -1.2363009 #> 792   792  1.0201267 #> 793   793  0.5437713 #> 794   794  0.3212794 #> 795   795 -1.2363009 #> 796   796  1.0201267 #> 797   797  0.5437713 #> 798   798  0.3212794 #> 799   799 -1.2363009 #> 800   800  1.0201267 #> 801   801  0.5437713 #> 802   802  0.3212794 #> 803   803 -1.2363009 #> 804   804  1.0201267 #> 805   805  0.5437713 #> 806   806  0.3212794 #> 807   807 -1.2363009 #> 808   808  1.0201267 #> 809   809  0.5437713 #> 810   810  0.3212794 #> 811   811 -1.2363009 #> 812   812  1.0201267 #> 813   813  0.5437713 #> 814   814  0.3212794 #> 815   815 -1.2363009 #> 816   816  1.0201267 #> 817   817  0.5437713 #> 818   818  0.3212794 #> 819   819 -1.2363009 #> 820   820  1.0201267 #> 821   821  0.5437713 #> 822   822  0.3212794 #> 823   823 -1.2363009 #> 824   824  1.0201267 #> 825   825  0.5437713 #> 826   826  0.3212794 #> 827   827 -1.2363009 #> 828   828  1.0201267 #> 829   829  0.5437713 #> 830   830  0.3212794 #> 831   831 -1.2363009 #> 832   832  1.0201267 #> 833   833  0.5437713 #> 834   834  0.3212794 #> 835   835 -1.2363009 #> 836   836  1.0201267 #> 837   837  0.5437713 #> 838   838  0.3212794 #> 839   839 -1.2363009 #> 840   840  1.0201267 #> 841   841  0.5437713 #> 842   842  0.3212794 #> 843   843 -1.2363009 #> 844   844  1.0201267 #> 845   845  0.5437713 #> 846   846  0.3212794 #> 847   847 -1.2363009 #> 848   848  1.0201267 #> 849   849  0.5437713 #> 850   850  0.3212794 #> 851   851 -1.2363009 #> 852   852  1.0201267 #> 853   853  0.5437713 #> 854   854  0.3212794 #> 855   855 -1.2363009 #> 856   856  1.0201267 #> 857   857  0.5437713 #> 858   858  0.3212794 #> 859   859 -1.2363009 #> 860   860  1.0201267 #> 861   861  0.5437713 #> 862   862  0.3212794 #> 863   863 -1.2363009 #> 864   864  1.0201267 #> 865   865  0.5437713 #> 866   866  0.3212794 #> 867   867 -1.2363009 #> 868   868  1.0201267 #> 869   869  0.5437713 #> 870   870  0.3212794 #> 871   871 -1.2363009 #> 872   872  1.0201267 #> 873   873  0.5437713 #> 874   874  0.3212794 #> 875   875 -1.2363009 #> 876   876  1.0201267 #> 877   877  0.5437713 #> 878   878  0.3212794 #> 879   879 -1.2363009 #> 880   880  1.0201267 #> 881   881  0.5437713 #> 882   882  0.3212794 #> 883   883 -1.2363009 #> 884   884  1.0201267 #> 885   885  0.5437713 #> 886   886  0.3212794 #> 887   887 -1.2363009 #> 888   888  1.0201267 #> 889   889  0.5437713 #> 890   890  0.3212794 #> 891   891 -1.2363009 #> 892   892  1.0201267 #> 893   893  0.5437713 #> 894   894  0.3212794 #> 895   895 -1.2363009 #> 896   896  1.0201267 #> 897   897  0.5437713 #> 898   898  0.3212794 #> 899   899 -1.2363009 #> 900   900  1.0201267 #> 901   901  0.5437713 #> 902   902  0.3212794 #> 903   903 -1.2363009 #> 904   904  1.0201267 #> 905   905  0.5437713 #> 906   906  0.3212794 #> 907   907 -1.2363009 #> 908   908  1.0201267 #> 909   909  0.5437713 #> 910   910  0.3212794 #> 911   911 -1.2363009 #> 912   912  1.0201267 #> 913   913  0.5437713 #> 914   914  0.3212794 #> 915   915 -1.2363009 #> 916   916  1.0201267 #> 917   917  0.5437713 #> 918   918  0.3212794 #> 919   919 -1.2363009 #> 920   920  1.0201267 #> 921   921  0.5437713 #> 922   922  0.3212794 #> 923   923 -1.2363009 #> 924   924  1.0201267 #> 925   925  0.5437713 #> 926   926  0.3212794 #> 927   927 -1.2363009 #> 928   928  1.0201267 #> 929   929  0.5437713 #> 930   930  0.3212794 #> 931   931 -1.2363009 #> 932   932  1.0201267 #> 933   933  0.5437713 #> 934   934  0.3212794 #> 935   935 -1.2363009 #> 936   936  1.0201267 #> 937   937  0.5437713 #> 938   938  0.3212794 #> 939   939 -1.2363009 #> 940   940  1.0201267 #> 941   941  0.5437713 #> 942   942  0.3212794 #> 943   943 -1.2363009 #> 944   944  1.0201267 #> 945   945  0.5437713 #> 946   946  0.3212794 #> 947   947 -1.2363009 #> 948   948  1.0201267 #> 949   949  0.5437713 #> 950   950  0.3212794 #> 951   951 -1.2363009 #> 952   952  1.0201267 #> 953   953  0.5437713 #> 954   954  0.3212794 #> 955   955 -1.2363009 #> 956   956  1.0201267 #> 957   957  0.5437713 #> 958   958  0.3212794 #> 959   959 -1.2363009 #> 960   960  1.0201267 #> 961   961  0.5437713 #> 962   962  0.3212794 #> 963   963 -1.2363009 #> 964   964  1.0201267 #> 965   965  0.5437713 #> 966   966  0.3212794 #> 967   967 -1.2363009 #> 968   968  1.0201267 #> 969   969  0.5437713 #> 970   970  0.3212794 #> 971   971 -1.2363009 #> 972   972  1.0201267 #> 973   973  0.5437713 #> 974   974  0.3212794 #> 975   975 -1.2363009 #> 976   976  1.0201267 #> 977   977  0.5437713 #> 978   978  0.3212794 #> 979   979 -1.2363009 #> 980   980  1.0201267 #> 981   981  0.5437713 #> 982   982  0.3212794 #> 983   983 -1.2363009 #> 984   984  1.0201267 #> 985   985  0.5437713 #> 986   986  0.3212794 #> 987   987 -1.2363009 #> 988   988  1.0201267 #> 989   989  0.5437713 #> 990   990  0.3212794 #> 991   991 -1.2363009 #> 992   992  1.0201267 #> 993   993  0.5437713 #> 994   994  0.3212794 #> 995   995 -1.2363009 #> 996   996  1.0201267 #> 997   997  0.5437713 #> 998   998  0.3212794 #> 999   999 -1.2363009 #> 1000 1000  1.0201267"},{"path":"/reference/find.package.file.html","id":null,"dir":"Reference","previous_headings":"","what":"Find file installed in package — find.package.file","title":"Find file installed in package — find.package.file","text":"function find location file installed package (.e. files located inside package's inst/ directory)","code":""},{"path":"/reference/find.package.file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find file installed in package — find.package.file","text":"","code":"find.package.file(package, file);"},{"path":"/reference/find.package.file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find file installed in package — find.package.file","text":"package string containing package name check file string containing name file","code":""},{"path":"/reference/find.package.file.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find file installed in package — find.package.file","text":"return one file path circumstances, unless multiple copies package .libPaths()","code":""},{"path":"/reference/find.package.file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find file installed in package — find.package.file","text":"Returns vector paths files installed package.","code":""},{"path":"/reference/find.package.file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find file installed in package — find.package.file","text":"Francis Nguyen","code":""},{"path":"/reference/find.package.file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find file installed in package — find.package.file","text":"","code":"filename <- find.package.file('BoutrosLab.utilities', 'NAMESPACE'); filename <- find.package.file('base', 'DESCRPTION');"},{"path":"/reference/generate.filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a filename in the lab standard — generate.filename","title":"Generate a filename in the lab standard — generate.filename","text":"function creates filename according date_project_core.extension lab standard.","code":""},{"path":"/reference/generate.filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a filename in the lab standard — generate.filename","text":"","code":"generate.filename(project.stem, file.core, extension, file.date = Sys.Date());"},{"path":"/reference/generate.filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a filename in the lab standard — generate.filename","text":"project.stem Name project file.core Main part filename extension type file file.date current date (defaults today; FALSE turns date-stamp)","code":""},{"path":"/reference/generate.filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a filename in the lab standard — generate.filename","text":"return value","code":""},{"path":"/reference/generate.filename.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a filename in the lab standard — generate.filename","text":"Paul C. Boutros","code":""},{"path":"/reference/generate.filename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a filename in the lab standard — generate.filename","text":"","code":"# generate a filename to screen generate.filename('NSCLC', 'StatisticalAnalysis', 'txt'); #> [1] \"2022-09-15_NSCLC_StatisticalAnalysis.txt\"  # generate a filename in context of another function save.session.profile( generate.filename('Prostate', 'StatisticalAnalysisSessionProfile', 'txt') );  # generate a filename without a date generate.filename('NSCLC', 'StatisticalAnalysis', 'txt', FALSE); #> [1] \"NSCLC_StatisticalAnalysis.txt\""},{"path":"/reference/get.most.recent.dir.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns most recent valid file or directory given a char string — get.most.recent.dir","title":"Returns most recent valid file or directory given a char string — get.most.recent.dir","text":"function tests filenames reverse date order, given input containing string 'DATE'.","code":""},{"path":"/reference/get.most.recent.dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns most recent valid file or directory given a char string — get.most.recent.dir","text":"","code":"get.most.recent.dir(dir.path, max.days=100);"},{"path":"/reference/get.most.recent.dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns most recent valid file or directory given a char string — get.most.recent.dir","text":"dir.path Name dir/file. contain string 'DATE' max.days Maximum days back test.","code":""},{"path":"/reference/get.most.recent.dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns most recent valid file or directory given a char string — get.most.recent.dir","text":"valid filepath","code":""},{"path":"/reference/get.most.recent.dir.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns most recent valid file or directory given a char string — get.most.recent.dir","text":"Nicholas Harding","code":""},{"path":"/reference/get.most.recent.dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns most recent valid file or directory given a char string — get.most.recent.dir","text":"","code":"# create a file with date 10 days old and find that file. name <- paste(as.Date(as.double(Sys.Date()) - 10, origin = \"1970-01-01\"), '_FILE', sep=''); print(name); #> [1] \"2022-09-05_FILE\" file.create(name); #> [1] TRUE file.name <- get.most.recent.dir('DATE_FILE'); print(file.name); #> [1] \"2022-09-05_FILE\" file.remove(name); #> [1] TRUE"},{"path":"/reference/help.BL.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation and Code search — help.BL","title":"Documentation and Code search — help.BL","text":"Search documentation code list packages.","code":""},{"path":"/reference/help.BL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Documentation and Code search — help.BL","text":"","code":"help.BL(pattern, packages = NULL, search.code = FALSE)"},{"path":"/reference/help.BL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation and Code search — help.BL","text":"pattern pattern search packages packages search search.code Whether code searched","code":""},{"path":"/reference/help.BL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation and Code search — help.BL","text":"documentation code search two item list matrices.","code":""},{"path":"/reference/help.BL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Documentation and Code search — help.BL","text":"Daryl Waggott","code":""},{"path":"/reference/help.BL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Documentation and Code search — help.BL","text":"","code":"help.BL(\"affy\"); #> $help #> [1] Topic   Title   Name    ID      Package LibPath Type    Field   Entry   #> <0 rows> (or 0-length row.names) #>  #> $code #> NULL #>"},{"path":"/reference/is.duplicated.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for duplicated values — is.duplicated","title":"Check for duplicated values — is.duplicated","text":"Check duplicated values.  Logical returned replicates.","code":""},{"path":"/reference/is.duplicated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for duplicated values — is.duplicated","text":"","code":"is.duplicated(x)"},{"path":"/reference/is.duplicated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for duplicated values — is.duplicated","text":"x vector","code":""},{"path":"/reference/is.duplicated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for duplicated values — is.duplicated","text":"logical replicates, including first value.","code":""},{"path":"/reference/is.duplicated.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check for duplicated values — is.duplicated","text":"Daryl Waggott","code":""},{"path":"/reference/is.missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Check proportion of missing — is.missing","title":"Check proportion of missing — is.missing","text":"Get percent missing return logical missing specified threshold.","code":""},{"path":"/reference/is.missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check proportion of missing — is.missing","text":"","code":"is.missing(x, rows = TRUE, missing.value = NA, threshold = NULL);"},{"path":"/reference/is.missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check proportion of missing — is.missing","text":"x vector matrix rows summary rows columns missing.value value considered missing.  Can vector values include NA. threshold value 0 1 determines missing threshold.","code":""},{"path":"/reference/is.missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check proportion of missing — is.missing","text":"Defaults returning percent row wise missing.  threshold given 0-1 output logical.","code":""},{"path":"/reference/is.missing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check proportion of missing — is.missing","text":"Daryl Waggott","code":""},{"path":"/reference/less.html","id":null,"dir":"Reference","previous_headings":"","what":"Page through a data object — less","title":"Page through a data object — less","text":"function allows user page data object similar UNIX less command.","code":""},{"path":"/reference/less.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Page through a data object — less","text":"","code":"less(x);"},{"path":"/reference/less.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Page through a data object — less","text":"x Name data object","code":""},{"path":"/reference/less.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Page through a data object — less","text":"return value","code":""},{"path":"/reference/less.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Page through a data object — less","text":"Richard de Borja","code":""},{"path":"/reference/less.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Page through a data object — less","text":"","code":"x <- rnorm(10000); less(x);"},{"path":"/reference/ls.objects.html","id":null,"dir":"Reference","previous_headings":"","what":"List of objects — ls.objects","title":"List of objects — ls.objects","text":"Improved listing objects R session","code":""},{"path":"/reference/ls.objects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of objects — ls.objects","text":"","code":"ls.objects(pos = 1, order.by, decreasing = TRUE, n = 10)"},{"path":"/reference/ls.objects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List of objects — ls.objects","text":"pos Alternative way specify environment, need change. See ls. order.Order objects name (default); options: Type, Size, PrettySize, Rows Columns. decreasing Order objects decreasing order (default). n number objects print; 10 default.","code":""},{"path":"/reference/ls.objects.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List of objects — ls.objects","text":"Returns detailed list objects R session.","code":""},{"path":"/reference/ls.objects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List of objects — ls.objects","text":"Returns names, type, size, number rows columns objects R session.","code":""},{"path":"/reference/ls.objects.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"List of objects — ls.objects","text":"Adapted postings R-help list 2004 Petr Pikal David Hinds additions made Tony Breyal JD Long. Please see http://stackoverflow.com/questions/1358003/tricks--manage--available-memory---r-session","code":""},{"path":"/reference/ls.objects.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"List of objects — ls.objects","text":"Denise Mak","code":""},{"path":"/reference/ls.objects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List of objects — ls.objects","text":"","code":"set.seed(123456789); temp <- data.frame(   x = rnorm(100),   y = sample(1:3, 100, TRUE)   );  # returns up to 5 objects ordered by name  ls.objects(n = 5); #> [1] \"Nothing to list\" # returns up to 10 (default) objects ordered by size ls.objects(order.by = 'Size'); #> [1] \"Nothing to list\""},{"path":"/reference/mixed.index.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixed index — mixed.index","title":"Mixed index — mixed.index","text":"Use forward reverse indices.","code":""},{"path":"/reference/mixed.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixed index — mixed.index","text":"","code":"mixed.index(x, index)"},{"path":"/reference/mixed.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixed index — mixed.index","text":"x vector index index values prefixed \"-\" counted reverse.","code":""},{"path":"/reference/mixed.index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mixed index — mixed.index","text":"Daryl Waggott","code":""},{"path":"/reference/qw.html","id":null,"dir":"Reference","previous_headings":"","what":"Quote Word — qw","title":"Quote Word — qw","text":"function mimics perl 'qw' function. splits string vector strings using space delimiter.","code":""},{"path":"/reference/qw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quote Word — qw","text":"","code":"qw(x, split = NULL);"},{"path":"/reference/qw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quote Word — qw","text":"x String split split Delimeter, tries guess","code":""},{"path":"/reference/qw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quote Word — qw","text":"Vector strings","code":""},{"path":"/reference/qw.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quote Word — qw","text":"Nicholas J. Harding","code":""},{"path":"/reference/qw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quote Word — qw","text":"","code":"# define string my.string <- 'green red blue yellow orange';  # use a string directly qw('green red blue yellow orange'); #> [1] \"green\"  \"red\"    \"blue\"   \"yellow\" \"orange\"  # use on an existing object qw(my.string); #> [1] \"green\"  \"red\"    \"blue\"   \"yellow\" \"orange\""},{"path":"/reference/ragged.rbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Ragged rbind — ragged.rbind","title":"Ragged rbind — ragged.rbind","text":"Row wise concatenation objects different lengths.","code":""},{"path":"/reference/ragged.rbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ragged rbind — ragged.rbind","text":"","code":"ragged.rbind(...)"},{"path":"/reference/ragged.rbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ragged rbind — ragged.rbind","text":"...","code":""},{"path":"/reference/ragged.rbind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ragged rbind — ragged.rbind","text":"Daryl Waggott","code":""},{"path":"/reference/read.config.file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Configuration File — read.config.file","title":"Read Configuration File — read.config.file","text":"function reads file list configuration options.  File paths data input output common items.","code":""},{"path":"/reference/read.config.file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Configuration File — read.config.file","text":"","code":"read.config.file(config.file, convert.path, old.path, new.path);"},{"path":"/reference/read.config.file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Configuration File — read.config.file","text":"config.file Name file containing configuration data read convert.path file paths converted platform compatability.  simple search replace old.string new.string completed config file.  default FALSE. old.path Pattern.  default \":\" unix machine \"/mnt/isilon/private\" windows. new.path Replacement. default \"/mnt/isilon/private\" unix machine \":\" windows.","code":""},{"path":"/reference/read.config.file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Configuration File — read.config.file","text":"Returns list parameters","code":""},{"path":"/reference/read.config.file.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read Configuration File — read.config.file","text":"Mehrdad Shamsi","code":""},{"path":"/reference/read.tabdelimited.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Tab-Delimited File — read.tabdelimited","title":"Read a Tab-Delimited File — read.tabdelimited","text":"function reads tab-delimited file header row-names","code":""},{"path":"/reference/read.tabdelimited.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Tab-Delimited File — read.tabdelimited","text":"","code":"read.tabdelimited(file);"},{"path":"/reference/read.tabdelimited.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Tab-Delimited File — read.tabdelimited","text":"file Name file read","code":""},{"path":"/reference/read.tabdelimited.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a Tab-Delimited File — read.tabdelimited","text":"simple wrapper function, ** extended!","code":""},{"path":"/reference/read.tabdelimited.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Tab-Delimited File — read.tabdelimited","text":"Returns results read.table() call","code":""},{"path":"/reference/read.tabdelimited.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read a Tab-Delimited File — read.tabdelimited","text":"Paul Boutros","code":""},{"path":"/reference/read.tabdelimited.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a Tab-Delimited File — read.tabdelimited","text":"","code":"# Add examples!"},{"path":"/reference/recode.vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode Vector — recode.vector","title":"Recode Vector — recode.vector","text":"Recode vector based set lookup values","code":""},{"path":"/reference/recode.vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode Vector — recode.vector","text":"","code":"recode.vector(x, lookup, drop = FALSE);"},{"path":"/reference/recode.vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode Vector — recode.vector","text":"x vector recode lookup list mappings x new values drop values x found lookup dropped .e. set NA, defaults FALSE","code":""},{"path":"/reference/recode.vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode Vector — recode.vector","text":"using factors recode data tends issues values dropped specified levels.  Recode.vector gets around .","code":""},{"path":"/reference/recode.vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode Vector — recode.vector","text":"recoded vector","code":""},{"path":"/reference/recode.vector.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recode Vector — recode.vector","text":"Daryl Waggott","code":""},{"path":"/reference/recode.vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode Vector — recode.vector","text":"","code":"a <- c(letters, NA); b <- list(abc = c(\"a\",\"b\",\"c\"), missing = NA); d <- recode.vector(x = a, lookup = b)"},{"path":"/reference/recursive.sort.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a data.frame by all rows or columns — recursive.sort","title":"Sort a data.frame by all rows or columns — recursive.sort","text":"function sort data.frame rows columns","code":""},{"path":"/reference/recursive.sort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a data.frame by all rows or columns — recursive.sort","text":"","code":"recursive.sort(x, by=\"col\",na.last=TRUE, decreasing=FALSE, skip=NULL, reverse = FALSE,     group = NULL, alternate.dim.order.func = NULL, alternate.dim.order.func.rev = FALSE)"},{"path":"/reference/recursive.sort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a data.frame by all rows or columns — recursive.sort","text":"x data.frame sort Sort (col)umns  row(s).  Defaults columns. na.last see order decreasing reverse sort order skip row column names skip creating sort order reverse sort order priority start last row column group group vector matrix allows nested ordering alternate.dim.order.func function used sort .e. mean, sum alternate.dim.order.func.rev sort alternate dimension descending order using results specified function","code":""},{"path":"/reference/recursive.sort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort a data.frame by all rows or columns — recursive.sort","text":"sorted data.frame","code":""},{"path":"/reference/recursive.sort.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sort a data.frame by all rows or columns — recursive.sort","text":"Daryl Waggott","code":""},{"path":"/reference/recursive.sort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort a data.frame by all rows or columns — recursive.sort","text":"","code":"dd <- data.frame(b = factor(c(\"Hi\", \"Med\", \"Hi\", \"Low\"),        levels = c(\"Low\", \"Med\", \"Hi\"), ordered = TRUE),       x = c(\"A\", \"D\", \"A\", \"C\"), y = c(8, 3, 9, 9),       z = c(9, 1, 1, 2));  recursive.sort(dd,skip = \"b\"); #>     b x y z #> 1  Hi A 8 9 #> 3  Hi A 9 1 #> 4 Low C 9 2 #> 2 Med D 3 1 recursive.sort(dd,by = \"row\"); #>   y z x   b #> 1 8 9 A  Hi #> 2 3 1 D Med #> 3 9 1 A  Hi #> 4 9 2 C Low"},{"path":"/reference/sample.subsets.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample unique subsets — sample.subsets","title":"Sample unique subsets — sample.subsets","text":"function picks random unique subsets vector.","code":""},{"path":"/reference/sample.subsets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample unique subsets — sample.subsets","text":"","code":"sample.subsets(x, size, n);"},{"path":"/reference/sample.subsets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample unique subsets — sample.subsets","text":"x vector sample subsets size size subset n number subsets sample","code":""},{"path":"/reference/sample.subsets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample unique subsets — sample.subsets","text":"list length n consisting elements length size","code":""},{"path":"/reference/sample.subsets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample unique subsets — sample.subsets","text":"Michal Grzadkowski","code":""},{"path":"/reference/sample.subsets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample unique subsets — sample.subsets","text":"","code":"# sample 5 unique pairs from the first three integers sample.subsets(1:10, 2, 5); #> [[1]] #> [1] 3 5 #>  #> [[2]] #> [1]  9 10 #>  #> [[3]] #> [1] 1 2 #>  #> [[4]] #> [1] 1 9 #>  #> [[5]] #> [1]  5 10 #>   # sample 12 unique subsets of size four from the uppercase alphabet sample.subsets},{"path":"/reference/save.session.profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Session Profile — save.session.profile","title":"Save Session Profile — save.session.profile","text":"function writes filename total memory used, total process time elapsed session info R session.","code":""},{"path":"/reference/save.session.profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Session Profile — save.session.profile","text":"","code":"save.session.profile(filename, stdout=FALSE);"},{"path":"/reference/save.session.profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Session Profile — save.session.profile","text":"filename Name file write session profile information .  stdout = TRUE, session profile information also printed screen. stdout Print session profile information screen.  Default FALSE.","code":""},{"path":"/reference/save.session.profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save Session Profile — save.session.profile","text":"Session profile includes memory used gc(), process time elapsed proc.time(), output ls() global environment, session info sessionInfo()","code":""},{"path":"/reference/save.session.profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Session Profile — save.session.profile","text":"return value, just writes output file (possibly screen).","code":""},{"path":"/reference/save.session.profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Save Session Profile — save.session.profile","text":"Denise Mak","code":""},{"path":"/reference/save.session.profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save Session Profile — save.session.profile","text":"","code":"x <- rnorm(1e8); save.session.profile(generate.filename('Test', 'Session.Profile', 'txt'));"},{"path":"/reference/string.capitalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Capitalize the words in a character string — string.capitalize","title":"Capitalize the words in a character string — string.capitalize","text":"function takes character string capitalizes either first word words desired.","code":""},{"path":"/reference/string.capitalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Capitalize the words in a character string — string.capitalize","text":"","code":"string.capitalize(input.string, all.words);"},{"path":"/reference/string.capitalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Capitalize the words in a character string — string.capitalize","text":"input.string character string capitalize .words boolean toggle indicating whether words capitalized (TRUE) just first one (FALSE)","code":""},{"path":"/reference/string.capitalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Capitalize the words in a character string — string.capitalize","text":"capitalized character string","code":""},{"path":"/reference/string.capitalize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Capitalize the words in a character string — string.capitalize","text":"Michal Grzadkowski","code":""},{"path":"/reference/string.capitalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Capitalize the words in a character string — string.capitalize","text":"","code":"# capitalizing the first/only word string.capitalize('this is a sentence.', all.words = FALSE); #> [1] \"This is a sentence.\" string.capitalize('attenborough'); #> [1] \"Attenborough \"  # capitalizing all the words string.capitalize('she sells seashells by the seashore', all.words = TRUE); #> [1] \"She Sells Seashells By The Seashore\""},{"path":"/reference/strsplit.to.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Split string into a matrix — strsplit.to.matrix","title":"Split string into a matrix — strsplit.to.matrix","text":"Split string matrix several element selection strategies max, min complex indices.","code":""},{"path":"/reference/strsplit.to.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split string into a matrix — strsplit.to.matrix","text":"","code":"strsplit.to.matrix(x, split, fixed = FALSE, perl = FALSE, select.cols = \"max\")"},{"path":"/reference/strsplit.to.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split string into a matrix — strsplit.to.matrix","text":"x character vector split character used splitting fixed fixed string used perl perl regex used select.cols columns returned.  used result parsing vector strings ragged array .e. strings return splits others.  default max, makes matrix number rows equal longest split.  min another option.  Alternatively, can use numeric vector corresponds foward reverse (prfixed -) indices. .e. c(1,-1) first last value.","code":""},{"path":"/reference/strsplit.to.matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split string into a matrix — strsplit.to.matrix","text":"Daryl Waggott","code":""},{"path":"/reference/substr.right.html","id":null,"dir":"Reference","previous_headings":"","what":"Substring from the end of a string — substr.right","title":"Substring from the end of a string — substr.right","text":"function takes character string number characters substrings character string end.","code":""},{"path":"/reference/substr.right.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Substring from the end of a string — substr.right","text":"","code":"substr.right(input.string, length);"},{"path":"/reference/substr.right.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Substring from the end of a string — substr.right","text":"input.string character string substring length length substring","code":""},{"path":"/reference/substr.right.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Substring from the end of a string — substr.right","text":"substring input.string","code":""},{"path":"/reference/substr.right.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Substring from the end of a string — substr.right","text":"Nathaniel Schmitz","code":""},{"path":"/reference/substr.right.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Substring from the end of a string — substr.right","text":"","code":"# right substring with length 3 of 'Boutros Lab' is 'Lab' substr.right('Boutros Lab', 3); #> [1] \"Lab\""},{"path":"/reference/trim.leading.trailing.whitespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","title":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","text":"function strips leading & trailing whitespace strings","code":""},{"path":"/reference/trim.leading.trailing.whitespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","text":"","code":"trim.leading.trailing.whitespace(x);"},{"path":"/reference/trim.leading.trailing.whitespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","text":"x String stripped","code":""},{"path":"/reference/trim.leading.trailing.whitespace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","text":"simple wrapper function, ** extended!","code":""},{"path":"/reference/trim.leading.trailing.whitespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","text":"Returns string leading & trailing whitespace removed, NA passed non-character","code":""},{"path":"/reference/trim.leading.trailing.whitespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","text":"Paul Boutros","code":""},{"path":"/reference/trim.leading.trailing.whitespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip leading & trailing whitespace — trim.leading.trailing.whitespace","text":"","code":"trim.leading.trailing.whitespace('  hi!   '); #> [1] \"hi!\""},{"path":"/reference/trim.leading.whitespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip leading whitespace — trim.leading.whitespace","title":"Strip leading whitespace — trim.leading.whitespace","text":"function strips leading whitespace strings","code":""},{"path":"/reference/trim.leading.whitespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip leading whitespace — trim.leading.whitespace","text":"","code":"trim.leading.whitespace(x);"},{"path":"/reference/trim.leading.whitespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip leading whitespace — trim.leading.whitespace","text":"x String stripped","code":""},{"path":"/reference/trim.leading.whitespace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip leading whitespace — trim.leading.whitespace","text":"simple wrapper function, ** extended!","code":""},{"path":"/reference/trim.leading.whitespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip leading whitespace — trim.leading.whitespace","text":"Returns string leading-whitespace removed, NA passed non-character","code":""},{"path":"/reference/trim.leading.whitespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Strip leading whitespace — trim.leading.whitespace","text":"Paul Boutros","code":""},{"path":"/reference/trim.leading.whitespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip leading whitespace — trim.leading.whitespace","text":"","code":"trim.leading.whitespace('    hi!'); #> [1] \"hi!\""},{"path":"/reference/trim.trailing.whitespace.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip trailing whitespace — trim.trailing.whitespace","title":"Strip trailing whitespace — trim.trailing.whitespace","text":"function strips trailing whitespace strings","code":""},{"path":"/reference/trim.trailing.whitespace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip trailing whitespace — trim.trailing.whitespace","text":"","code":"trim.trailing.whitespace(x);"},{"path":"/reference/trim.trailing.whitespace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip trailing whitespace — trim.trailing.whitespace","text":"x String stripped","code":""},{"path":"/reference/trim.trailing.whitespace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Strip trailing whitespace — trim.trailing.whitespace","text":"simple wrapper function, ** extended!","code":""},{"path":"/reference/trim.trailing.whitespace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip trailing whitespace — trim.trailing.whitespace","text":"Returns string trailing-whitespace removed, NA passed non-character","code":""},{"path":"/reference/trim.trailing.whitespace.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Strip trailing whitespace — trim.trailing.whitespace","text":"Paul Boutros","code":""},{"path":"/reference/trim.trailing.whitespace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strip trailing whitespace — trim.trailing.whitespace","text":"","code":"trim.trailing.whitespace('hi!   '); #> [1] \"hi!\""}]
